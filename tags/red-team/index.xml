<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Red Team on edermi's Blog</title><link>https://edermi.github.io/tags/red-team/</link><description>Recent content in Red Team on edermi's Blog</description><generator>Hugo</generator><language>en-us</language><managingEditor>spam-blog@michael-eder.net (Michael Eder)</managingEditor><webMaster>spam-blog@michael-eder.net (Michael Eder)</webMaster><lastBuildDate>Mon, 09 Sep 2024 20:25:47 +0200</lastBuildDate><atom:link href="https://edermi.github.io/tags/red-team/index.xml" rel="self" type="application/rss+xml"/><item><title>When Certificates Fail: A Story of Bypassed MFA in Remote Access</title><link>https://edermi.github.io/post/2024/mfa_bypass_mtls/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><author>spam-blog@michael-eder.net (Michael Eder)</author><guid>https://edermi.github.io/post/2024/mfa_bypass_mtls/</guid><description>&lt;p>Long time no see! After 3 years of no new blog posts and also no conference talks from my side, I decided it&amp;rsquo;s time to write again. I&amp;rsquo;ll start easy with a fun story that happened a while ago. I gave a short lightning talk about this on &lt;a href="https://alligatorcon.eu/index-2024.html">Alligatorcon 2024&lt;/a>, but as it may be of greater interest, ChatGPT and I wrote a little more elaborate version that consists of full sentences. If you prefer clicking through my original slides, &lt;a href="https://github.com/edermi/papers/blob/master/AlligatorconEU2024%20-%20Lightning%20Talk%20Not%20So%20Smart%20Card/Lightning%20Talk%20MFA%20Alligatorcon%202024.pdf">you can find them here&lt;/a>.&lt;/p></description></item><item><title>Vulnerabilities on vmwareidentity.de (XSS) and in VMware UEM (exportable authentication certificate)</title><link>https://edermi.github.io/post/2021/vmware_vulnerabilities/</link><pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate><author>spam-blog@michael-eder.net (Michael Eder)</author><guid>https://edermi.github.io/post/2021/vmware_vulnerabilities/</guid><description>&lt;p>This post is a short notice about vulnerabilities in VMware products I found earlier this year.
During a penetration test of a freshly built environment, I took a closer look at VMware Unified Access Gateway (UAG) in combination with devices enrolled and managed via VMware Unified Endpoint Management (UEM).
I found a reflected XSS vulnerability on VMware&amp;rsquo;s authenticator &lt;code>vmwareidentity.de&lt;/code> that can be abused by sending links to unauthenticated victims.
Also, I found it possible to export a user&amp;rsquo;s authentication certificate, which allows to access zero trust protected resources without access to the user&amp;rsquo;s device or account on a trusted system.
There has been no advisory or notification for affected customers I am aware of.
The disclosure deadline was already a few weeks ago and VMware did not respond to multiple attempts of contacting them as well as offering an extension of the responsible disclosure timeframe, therefore I am releasing the vulnerability details to the public.&lt;/p></description></item><item><title>Modding Gophish</title><link>https://edermi.github.io/post/2021/modding_gophish/</link><pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate><author>spam-blog@michael-eder.net (Michael Eder)</author><guid>https://edermi.github.io/post/2021/modding_gophish/</guid><description>&lt;p>&lt;em>&lt;strong>TL;DR&lt;/strong>&lt;/em>: &lt;em>I&amp;rsquo;ll shine a light on Gophish and how to modify it to change behavior or introduce/remove functionality. At the end of this post, you&amp;rsquo;ll know how to host custom 404 pages in Gophish and how to abuse HTTP basic auth instead of login forms embedded on the landing page to obtain juicy creds.&lt;/em>&lt;/p>
&lt;p>A few days ago I tweeted one of my modifications to Gophish:&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">After low click rates in my last phishing campaign due to staff being extremely well trained for this kind of attack, I modded gophish to show an HTTP Basic auth request instead of a phishing site. Once data is entered, users are redirected to a legit site: &lt;a href="https://t.co/LncsgT8OSE">pic.twitter.com/LncsgT8OSE&lt;/a>&lt;/p></description></item><item><title>Abusing accounts that already changed their password</title><link>https://edermi.github.io/post/2020/abusing_accounts_that_changed_passwords/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><author>spam-blog@michael-eder.net (Michael Eder)</author><guid>https://edermi.github.io/post/2020/abusing_accounts_that_changed_passwords/</guid><description>&lt;p>&lt;em>&lt;strong>TL;DR&lt;/strong>&lt;/em>: &lt;em>In some circumstances, you may find usable Kerberos TGTs on a system you compromised - these allow you to impersonate a user that already changed its password (e.g. because the user got suspicious or a PAM solution is in place).&lt;/em>&lt;/p>
&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>On a recent project, I was tasked with the usual goal: Start from the ground and find a way to take over the company - in the end, if possible, somehow become Domain Admin.
Getting started was tough, but after some time I got my hands on a few admin accounts and had a way to take control of the Domain Admins - but the way involved resetting the password of a service account.
Unless I do not have a very good reason to perform the password change or the explicit &amp;ldquo;Do it!&amp;rdquo; from the customer, I prefer finding another way.
Lurking for a few days on the machines I gained access so far, I discovered two accounts that logged on recently.
They both provided a simpler way to become Domain Admin because they were allowed to write the Domain Admin group directly - Jackpot!&lt;/p></description></item><item><title>Passing the hash with native RDP client (mstsc.exe)</title><link>https://edermi.github.io/post/2018/native_rdp_pass_the_hash/</link><pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate><author>spam-blog@michael-eder.net (Michael Eder)</author><guid>https://edermi.github.io/post/2018/native_rdp_pass_the_hash/</guid><description>&lt;p>&lt;em>&lt;strong>TL;DR:&lt;/strong> If the remote server allows Restricted Admin login, it is possible to login via RDP by passing the hash using the native Windows RDP client &lt;code>mstsc.exe&lt;/code>. (You&amp;rsquo;ll need mimikatz or something else to inject the hash into the process)&lt;/em>&lt;/p>
&lt;p>On engagements it is usually only a matter of time to get your hands on NTLM hashes.
These can usually be directly used to authenticate against other services / machines and enable lateral movement.
Powershell / PSExec, SMB and WMI are usual targets to pass the hash to, but it is also possible to use it to establish a RDP session on a remote host.
Searching the Internet on how to do this unfortunately always leads to &lt;a href="https://www.kali.org/penetration-testing/passing-hash-remote-desktop/">using xfreerdp&lt;/a>, but I wasn&amp;rsquo;t able to find anything on the Internet regarding how to do this directly using the provided RDP client &lt;code>mstsc.exe&lt;/code>, so I had to find out on my own.&lt;/p></description></item></channel></rss>